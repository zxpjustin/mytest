package debug;
//加上这一行

Branch1加了这样的一行

import java.io.*;
import java.lang.Thread;
ytr
import java.io.*;
import java.lang.Thread;import java.io.*;
import java.lang.Thread;
package debug;
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Branch1删掉了一个“package debug;”
import java.io.*;
import java.lang.Thread;


import java.io.*;
import java.lang.Thread;
package debug;

master在这里加了一行

噶个案的水果vegergfgv
import java.io.*;
import java.lang.Thread;
package debug;

import java.io.*;
import java.lang.Thread;
package debug;

master在这里删了一个“import java.lang.Thread;”
import java.io.*;

package debug;

import java.io.*;
import java.lang.Thread;


class MyThread extends Thread{
  public int x = 0;

  public void run(){
    System.out.println(++x);
  }
}

/**
 * File Name:   TestMitiThread.java
 * Created by:  IntelliJ IDEA.
 * Copyright:   Copyright (c) 2003-2006
 * Company:     Lavasoft( [url]http://lavasoft.blog.51cto.com/[/url])
 * Author:      leizhimin
 * Modifier:    leizhimin
 * Date Time:   2007-5-17 10:03:12
 * Readme:      通过扩展Thread类实现多线程
 */
public class TestMitiThread {
    public static void main(String[] rags) {
        System.out.println(Thread.currentThread().getName() + " 线程运行开始!");
        new MitiSay("A").start();
        new MitiSay("B").start();
        System.out.println(Thread.currentThread().getName() + " 线程运行结束!");
    }
}
 
class MitiSay extends Thread {
    public MitiSay(String threadName) {
        super(threadName);
    }
 
    public void run() {
        System.out.println(getName() + " 线程运行开始!");
        for (int i = 0; i < 10; i++) {
            System.out.println(i + " " + getName());
            try {
                sleep((int) Math.random() * 10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println(getName() + " 线程运行结束!");
    }
}

public class Test {
  public static void main(String[] args) throws Exception{
    
    for(int i=0;i<10;i++){
      Thread t = new MyThread();
      t.start();
    }
    Thread.sleep(10000);//让上面的线程运行完成
    R r = new R();
    for(int i=0;i<10;i++){
      Thread t = new Thread(r);
      t.start();
    }
  }
}